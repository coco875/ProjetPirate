@startuml Classes
!pragma layout smetana

' DÃ©claration des classes
class Jeu {
    --
    + initialiserJeu()
}
Jeu --> "1" Pioche : -pioche
Jeu --> "1" ZoneOffensive : -zoneOffensiveJoueur1
Jeu --> "1" ZoneOffensive : -zoneOffensiveJoueur2
Jeu --> "1" ZoneStrategique : -zoneStrategiqueJoueur1
Jeu --> "1" ZoneStrategique : -zoneStrategiqueJoueur2

class Pioche {
    --
    + ajouterCarte(carte : Carte)
    + piocher() : Carte
    + melanger()
    + estVide() : Boolean
    + getNombreCartes() : Integer
}

Pioche --> "{ordered} *" Carte : -cartes

class ParserPirate {
    --
    {static} + chargerPirate(fichier: File): Optional<Pirate>
    {static} + chargerPirates(repertoire: File): List<Pirate>
}

class ParserCarte {
    --
    {static} + initialiserRegistry()
    {static} + creerCarte(type: String, nom: String, desc: String, cout: int, properties: Map<String,String>): Carte
    {static} + lireCarte(filePath: String): Optional<Carte>
}

interface FabriqueCarte {
    + creer(nomCarte: String, description: String, cout: int, properties: Map<String,String>): Carte
}

ParserCarte *--"1" FabriqueCarte : -registryCartes
note on link: nomType : String

class ZoneOffensive {
    --
    + ajouterCarte(carte : Carte)
    + getCartesOffensives() : List<CarteOffensive>
    + viderZone()
}
ZoneOffensive --> "{ordered} *" CarteOffensive : -cartes

class ZoneStrategique {
    --
    + ajouterCarte(carte : Carte)
    + getCartesStrategiques() : List<CarteStrategique>
    + viderZone()
}
ZoneStrategique --> "{ordered} *" CarteStrategique : -cartes

class Joueur {
    - vie: Integer = 5
    - popularite: Integer = 0
    - or: Integer = 3
    - nbCartes : Integer
    --
    + Joueur(pirate : Pirate)
    + getCarteSpecial(): Carte
    + getPointsDeVie() : Integer
    + setVie(vie : Integer) 

    + getPopularite() : Integer
    + setPopularite(popularite : Integer) 
    + getOr() : Integer
    + setOr(or : Integer)
    + getNbCartes() : Integer
    + setNbCartes(nbCartes : Integer)
    + getPirate() : Pirate
    + getNom() : String

    + perdrePointsDeVie(points : Integer)
    + gagnerPointsDeVie(points : Integer)
    + perdrePopularite(points : Integer)
    + gagnerPopularite(points : Integer)
    + perdreOr(montant : Integer)
    + gagnerOr(montant : Integer)

    + getMain() : List<Carte>
    + ajouterCarte(carte : Carte) 
    + retirerCarte(indexCarte : Integer) : Boolean
    
}
Joueur --> "1" Pirate : -pirate
Joueur --> "{ordered} *" Carte : -main

class Pirate {
    - nom : String
    - vie : Integer
    - popularite : Integer
    - description : String
    - cheminImage : String
    --
    + Pirate(nom : String, vie : Integer, popularite : Integer, description : String, carteCoupSpecial : Carte)
    + Pirate(nom : String)
    + getNom() : String
    + getDescription() : String
    + getCarteSpecial() : Carte
    + getPopularite() : Integer
    + setPopularite(popularite : Integer)
    + getVie() : Integer
    + setVie(vie : Integer)
    + getCheminImage() : String
    + setCheminImage(cheminImage : String)
}

Pirate --> "1" Carte : -carteCoupSpecial

abstract class "<<abstract>> Carte" as Carte {
    - nomCarte : String
    - description : String
    - cout : Integer
    --
    + Carte(type : TypeCarte, nomCarte : String, description : String, cout : Integer)
    + Carte(type : TypeCarte, nomCarte : String, description : String)
    + getNomCarte() : String
    + setNomCarte(nomCarte : String) 
    + getDescription() : String
    + setDescription(description : String) 
    + getCout() : Integer
    + setCout(cout : Integer) 
    + getType() : TypeCarte
    + <<abstract>> effetCarte() : EffetCarte {abstract}
    + toString() : String
    + getDegatsInfliges() : Integer
    + getDegatsSubis() : Integer
    + getPopulariteGagnee() : Integer
    + getVieGagne() : Integer
    + getOrGagne() : Integer
    + <<abstract>> getCheminImage() : String {abstract}
}
Carte *--> "<<enumeration>> TypeCarte" : -type

class "<<static>> EffetCarte" as EffetCarte {
    + degatsInfliges : Integer
    + degatsSubis : Integer
    + populariteGagnee : Integer
    + vieGagne : Integer
    + orGagne : Integer
}
Carte +-- EffetCarte

abstract class "<<abstract>> CarteOffensive" as CarteOffensive extends Carte {
    + CarteOffensive(nomCarte : String, description : String, typeOffensif : TypeOffensif, cout : Integer)
    + CarteOffensive(nomCarte : String, description : String, typeOffensif : TypeOffensif)
    + getTypeOffensif() : TypeOffensif
}


CarteOffensive *--> "1" "<<enumeration>> TypeOffensif" : -typeOffensif


class CarteAttaque extends CarteOffensive {
    - degatsInfliges : Integer
    - degatsSubis : Integer
    --
    + CarteAttaque(nomCarte : String, description : String, cout : Integer, degatsInfliges : Integer, degatsSubis : Integer)
    + CarteAttaque(nomCarte : String, description : String, degatsInfliges : Integer, degatsSubis : Integer)
    + effetCarte() : EffetCarte
    + getCheminImage() : String
}


class CarteSoin extends CarteOffensive {
    - vieGagne : Integer
    --
    + CarteSoin(nomCarte : String, description : String, cout : Integer, pointsDeSoin : Integer)
    + CarteSoin(nomCarte : String, description : String, pointsDeSoin : Integer)
    + effetCarte() : EffetCarte
    + getCheminImage() : String
}


abstract class "<<abstract>> CarteStrategique" as CarteStrategique extends Carte {
    + CarteStrategique(nomCarte : String, description : String, typeStrategique : TypeStrategique, cout : Integer)
    + CarteStrategique(nomCarte : String, description : String, typeStrategique : TypeStrategique)
    + getTypeStrategique() : TypeStrategique
    + estPopularite() : Boolean
    + estTresor() : Boolean
}


CarteStrategique  *--> "1" "<<enumeration>> TypeStrategique" : -typeStrategique


class CartePopularite extends CarteStrategique {
    - populariteGagnee : Integer
    - degatsSubis : Integer
    --
    + CartePopularite(nomCarte : String, description : String, cout : Integer, populariteGagnee : Integer, degatsSubis : Integer)
    + CartePopularite(nomCarte : String, description : String, populariteGagnee : Integer, degatsSubis : Integer)
    + effetCarte() : EffetCarte
    + getCheminImage() : String
}


class CarteTresor extends CarteStrategique {
    - orGagne : Integer
    --
    + CarteTresor(nomCarte : String, description : String, cout : Integer, orGagne : Integer)
    + CarteTresor(nomCarte : String, description : String, orGagne : Integer)
    + effetCarte() : EffetCarte
    + getCheminImage() : String
}


enum "<<enumeration>> TypeCarte" {
    OFFENSIVE
    STRATEGIQUE
}


enum "<<enumeration>> TypeOffensif" {
    ATTAQUE
    SOIN
}


enum "<<enumeration>> TypeStrategique" {
    POPULARITE
    TRESOR
}


class ControlJeu {
    - joueurActif : Integer
    
    --
    + ControlJeu()
    + initialiserJeu(pirate1 : Pirate, pirate2 : Pirate)  
    + distribuerCartesInitiales()  
    + appliquerEffetsCartes()  
    + defausserCartesPlateau()  
    + verifierFinPartie() : Boolean
    + determinerVainqueur() : Joueur
    + passerAuJoueurSuivant()  
    + setJoueurActif(index : Integer)  
    + getJoueurActif() : Integer
    + piocherCarte() : Carte
    + jouerCarte(carte : Carte) : Boolean
    + defausserCarte(indexCarte : Integer) : Boolean
    + getControlCartePlateau() : ControlCartePlateau
    + getControlPioche() : ControlPioche
    + getJoueur(index : Integer) : ControlJoueur
}

ControlJeu --> "1" Jeu : -jeu
ControlJeu --> "1" ControlPioche : -controlPioche
ControlJeu --> "1" ControlCartePlateau : -controlCartePlateau
ControlJeu -> "2..2" ControlJoueur : -controlJoueurs
ControlJeu --> "1" ControlZoneJoueur : -controlZoneJoueur1
ControlJeu --> "1" ControlZoneJoueur : -controlZoneJoueur2 


class ControlJoueur {
    
    --
    + ControlJoueur(joueur : Joueur, controlPioche : ControlPioche, controlZoneJoueur : ControlZoneJoueur)
    + initialiserMain()  
    + piocher() : Carte
    + jouerCarte(indexCarte : Integer) : Boolean
    + jouerCarte(carte : Carte) : Boolean
    + defausserCarte(indexCarte : Integer) : Boolean
    + perdrePointsDeVie(points : Integer)  
    + gagnerPointsDeVie(points : Integer)  
    + perdrePopularite(points : Integer)  
    + gagnerPopularite(points : Integer)  
    + perdreOr(montant : Integer) : Boolean
    + gagnerOr(montant : Integer)  
    + getMain() : List<Carte>
    + getJoueur() : Joueur
}
ControlJoueur --> "1" Joueur : -joueur
ControlJoueur --> "1" ControlPioche : -controlPioche
ControlJoueur --> "1" ControlZoneJoueur : -controlZoneJoueur


class ControlCartePlateau {
    
    --
    + ControlCartePlateau(controlJoueur1 : ControlJoueur, controlJoueur2 : ControlJoueur, zoneJoueur1 : ControlZoneJoueur, zoneJoueur2 : ControlZoneJoueur)
    + setJoueurs(controlJoueur1 : ControlJoueur, controlJoueur2 : ControlJoueur)  
    + appliquerEffetCarte()  
    + defausserCartesPlateau()  
}
ControlCartePlateau --> "1" ControlJoueur : -controlJoueur1
ControlCartePlateau --> "1" ControlJoueur : -controlJoueur2
ControlCartePlateau --> "1" ControlZoneJoueur : -zoneJoueur1
ControlCartePlateau --> "1" ControlZoneJoueur : -zoneJoueur2


class ControlPioche {
    --
    + ControlPioche()
    + initialiserPioche()  
    + piocher() : Carte
    + estVide() : Boolean
    - chargerCartesDepuisRepertoire() : List<Carte>
}
ControlPioche --> "1" Pioche : -pioche


class ControlZoneJoueur {

    --
    + ControlZoneJoueur(zoneOffensive : ZoneOffensive, zoneStrategique : ZoneStrategique)
    + ajouterCarteOffensive(carte : CarteOffensive)  
    + ajouterCarteStrategique(carte : CarteStrategique)  
    + viderZone()  
    + getZoneOffensive() : ZoneOffensive
    + getZoneStrategique() : ZoneStrategique
}
ControlZoneJoueur --> "1" ZoneOffensive : -zoneOffensive
ControlZoneJoueur --> "1" ZoneStrategique : -zoneStrategique

class BoundaryJeu {
    # scan : Scanner
    --
    + BoundaryJeu(controlJeu : ControlJeu)
    + afficherMessage()  
    + lancerJeu()  
    + afficherRegles()  
    + demarrerJeu()  
    + jouerPartie()  
    + fermer()
    # demanderPirate(numeroJoueur : Integer) : Pirate
    {static} + getPiratesDisponibles() : List<Pirate>
    - demanderContinuerIteration() : Boolean
    - jouerCarte(carte : Carte)  
    - afficherResultatFinal()  
}
BoundaryJeu --> "1" ControlJeu : #controlJeu
@enduml