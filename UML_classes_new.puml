@startuml ProjetPirate
!pragma layout smetana

' DÃ©claration des classes
class Jeu {
    --
    + initialiserJeu()
}
Jeu --> "1" Pioche
Jeu --> "2" ZoneOffensives
Jeu --> "2" ZoneStrategique

class Pioche {
    --
    + ajouterCarte(carte : Carte)
    + piocher() : Carte
    + melanger()
    + estVide() : boolean
    + getNombreCartes() : int
}

Pioche --> "{ordered} *" Carte


class ZoneOffensive {
    --
    + ajouterCarte(carte : Carte)
    + getCartesOffensives() : List<CarteOffensive>
    + viderZone()
}
ZoneOffensive --> "{ordered} *" CarteOffensive

class ZoneStrategique {
    --
    + ajouterCarte(carte : Carte)
    + getCartesStrategiques() : List<CarteStrategique>
    + viderZone()
}
ZoneStrategique --> "{ordered} *" CarteStrategique

class Joueur {
    - vie: int
    - popularite: int
    - or: int
    - nbCartes : int
    --
    + Joueur(pirate : Pirate)
    + getCarteSpecial(): Carte
    + getPointsDeVie() : int
    + setVie(vie : int) 

    + getPopularite() : int
    + setPopularite(popularite : int) 
    + getOr() : int
    + setOr(or : int)
    + getNbCartes() : int
    + setNbCartes(nbCartes : int)
    + getPirate() : Pirate
    + getNom() : String

    + perdrePointsDeVie(points : int)
    + gagnerPointsDeVie(points : int)
    + perdrePopularite(points : int)
    + gagnerPopularite(points : int)
    + perdreOr(montant : int)
    + gagnerOr(montant : int)

    + getMain() : List<Carte>
    + ajouterCarte(carte : Carte) 
    + retirerCarte(indexCarte : int) : boolean
    
}
Joueur --> "1" Pirate
Joueur --> "{ordered} *" Carte

class Pirate {
    - nom : String
    - vie : int
    - popularite : int
    - description : String
    - cheminImage : String
    - carteCoupSpecial : Carte
    --
    + Pirate(nom : String, vie : int, popularite : int, description : String, carteCoupSpecial : Carte)
    + Pirate(nom : String)
    + getNom() : String
    + getDescription() : String
    + setDescription(description : String)
    + getCarteSpecial() : Carte
    + getPopularite() : int
    + setPopularite(popularite : int)
    + getVie() : int
    + setVie(vie : int)
    + getCheminImage() : String
    + setCheminImage(cheminImage : String)
}

abstract class "<<abstract>> Carte" as Carte {
    - type : TypeCarte
    - nomCarte : String
    - description : String
    - cout : int
    --
    + Carte(type : TypeCarte, nomCarte : String, description : String, cout : int)
    + Carte(type : TypeCarte, nomCarte : String, description : String)
    + getNomCarte() : String
    + setNomCarte(nomCarte : String) 
    + getDescription() : String
    + setDescription(description : String) 
    + getCout() : int
    + setCout(cout : int) 
    + getType() : TypeCarte
    + <<abstract>> effetCarte() : EffetCarte {abstract}
    + toString() : String
    + getDegatsInfliges() : int
    + getDegatsSubis() : int
    + getPopulariteGagnee() : int
    + getVieGagne() : int
    + getOrGagne() : int
    + <<abstract>> getCheminImage() : String {abstract}
}

' Classe abstraite CarteOffensive
abstract class "<<abstract>> CarteOffensive" as CarteOffensive extends Carte {
    - typeOffensif : TypeOffensif
    --
    + CarteOffensive(nomCarte : String, description : String, typeOffensif : TypeOffensif, cout : int)
    + CarteOffensive(nomCarte : String, description : String, typeOffensif : TypeOffensif)
    + getTypeOffensif() : TypeOffensif
    + setTypeOffensif(typeOffensif : TypeOffensif)  
    + estTresorOffensif() : boolean
}


CarteOffensive *--"<<enumeration>> TypeOffensif"


' Classe CarteAttaque
class CarteAttaque extends CarteOffensive {
    - degatsInfliges : int
    - degatsSubis : int
    --
    + CarteAttaque(nomCarte : String, description : String, cout : int, degatsInfliges : int, degatsSubis : int)
    + CarteAttaque(nomCarte : String, description : String, degatsInfliges : int, degatsSubis : int)
    + effetCarte() : EffetCarte
    + getCheminImage() : String
}



' Classe CarteSoin
class CarteSoin extends CarteOffensive {
    - vieGagne : int
    --
    + CarteSoin(nomCarte : String, description : String, cout : int, pointsDeSoin : int)
    + CarteSoin(nomCarte : String, description : String, pointsDeSoin : int)
    + effetCarte() : EffetCarte
    + getCheminImage() : String
}

' Classe abstraite CarteStrategique
abstract class "<<abstract>> CarteStrategique" as CarteStrategique extends Carte {
    - typeStrategique : TypeStrategique
    --
    + CarteStrategique(nomCarte : String, description : String, typeStrategique : TypeStrategique, cout : int)
    + CarteStrategique(nomCarte : String, description : String, typeStrategique : TypeStrategique)
    + getTypeStrategique() : TypeStrategique
    + setTypeStrategique(typeStrategique : TypeStrategique)  
    + estPopularite() : boolean
    + estTresor() : boolean
}


CarteStrategique *-- "<<enumeration>> TypeStrategique"

' Classe CartePopularite
class CartePopularite extends CarteStrategique {
    - populariteGagnee : int
    - degatsSubis : int
    --
    + CartePopularite(nomCarte : String, description : String, cout : int, populariteGagnee : int, degatsSubis : int)
    + CartePopularite(nomCarte : String, description : String, populariteGagnee : int, degatsSubis : int)
    + effetCarte() : EffetCarte
    + getCheminImage() : String
}

' Classe CarteTresor
class CarteTresor extends CarteStrategique {
    - orGagne : int
    --
    + CarteTresor(nomCarte : String, description : String, cout : int, orGagne : int)
    + CarteTresor(nomCarte : String, description : String, orGagne : int)
    + effetCarte() : EffetCarte
    + getCheminImage() : String
}

' Enum TypeCarte
enum "<<enumeration>> TypeCarte" {
    OFFENSIVE
    STRATEGIQUE
}

' Enum TypeOffensif
enum "<<enumeration>> TypeOffensif" {
    ATTAQUE
    SOIN
}

' Enum TypeStrategique
enum "<<enumeration>> TypeStrategique" {
    POPULARITE
    TRESOR
}



' Classe ControlJeu
class ControlJeu {
    - joueurActif : int
    
    --
    + ControlJeu()
    + initialiserJeu(pirate1 : Pirate, pirate2 : Pirate)  
    + distribuerCartesInitiales()  
    + appliquerEffetsCartes()  
    + defausserCartesPlateau()  
    + verifierFinPartie() : boolean
    + determinerVainqueur() : Joueur
    + passerAuJoueurSuivant()  
    + setJoueurActif(index : int)  
    + getJoueurActif() : int
    + piocherCarte() : Carte
    + jouerCarte(carte : Carte) : boolean
    + defausserCarte(indexCarte : int) : boolean
    + getControlCartePlateau() : ControlCartePlateau
    + getControlPioche() : ControlPioche
    + getJoueur(index : int) : ControlJoueur
}

ControlJeu --> "1" Jeu
ControlJeu --> "1" ControlPioche
ControlJeu --> "1" ControlCartePlateau
ControlJeu --> "2" ControlJoueur
ControlJeu --> "2" ControlZoneJoueur

' Classe ControlJoueur
class ControlJoueur {
    
    --
    + ControlJoueur(joueur : Joueur, controlPioche : ControlPioche, controlZoneJoueur : ControlZoneJoueur)
    + initialiserMain()  
    + piocher() : Carte
    + jouerCarte(indexCarte : int) : boolean
    + jouerCarte(carte : Carte) : boolean
    + defausserCarte(indexCarte : int) : boolean
    + perdrePointsDeVie(points : int)  
    + gagnerPointsDeVie(points : int)  
    + perdrePopularite(points : int)  
    + gagnerPopularite(points : int)  
    + perdreOr(montant : int) : boolean
    + gagnerOr(montant : int)  
    + getMain() : List<Carte>
    + getJoueur() : Joueur
}
ControlJoueur --> "1" Joueur
ControlJoueur --> "1" ControlPioche
ControlJoueur --> "1" ControlZoneJoueur

' Classe ControlCartePlateau
class ControlCartePlateau {
    
    --
    + ControlCartePlateau(controlJoueur1 : ControlJoueur, controlJoueur2 : ControlJoueur, zoneJoueur1 : ControlZoneJoueur, zoneJoueur2 : ControlZoneJoueur)
    + setJoueurs(controlJoueur1 : ControlJoueur, controlJoueur2 : ControlJoueur)  
    + appliquerEffetCarte()  
    + defausserCartesPlateau()  
}
ControlCartePlateau --> "2" ControlJoueur
ControlCartePlateau --> "2" ControlZoneJoueur



' Classe ControlPioche
class ControlPioche {
    --
    + ControlPioche()
    + initialiserPioche()  
    + piocher() : Carte
    + estVide() : boolean
    - chargerCartesDepuisRepertoire() : List<Carte>
}
ControlPioche --> "1" Pioche

' Classe ControlZoneJoueur
class ControlZoneJoueur {

    --
    + ControlZoneJoueur(zoneOffensive : ZoneOffensive, zoneStrategique : ZoneStrategique)
    + ajouterCarteOffensive(carte : CarteOffensive)  
    + ajouterCarteStrategique(carte : CarteStrategique)  
    + viderZone()  
    + getZoneOffensive() : ZoneOffensive
    + getZoneStrategique() : ZoneStrategique
}
ControlZoneJoueur --> "1" ZoneOffensive
ControlZoneJoueur --> "1" ZoneStrategique

class BoundaryJeu {
    - scan : Scanner
    --
    + BoundaryJeu(controlJeu : ControlJeu)
    + afficherMessage()  
    + lancerJeu()  
    + afficherRegles()  
    + demarrerJeu()  
    + jouerPartie()  
    + fermer()  
    --
    # demanderPirate(numeroJoueur : int) : Pirate
    + static getPiratesDisponibles() : List<Pirate>
    --
    - demanderContinuerIteration() : boolean
    - jouerCarte(carte : Carte)  
    - afficherResultatFinal()  
}
BoundaryJeu --> "1" ControlJeu


@enduml